import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
from time import sleep
from matplotlib.pyplot import tight_layout
from settings import *

date_and_time = ['09/01/20 00:00:00','09/11/20 01:59:00','09/11/20 03:59:00','09/11/20 05:59:00','09/11/20 07:59:00','09/11/20 10:00:00','09/11/20 12:00:00','09/11/20 14:00:00','09/11/20 16:00:00','09/11/20 18:00:00','09/11/20 20:01:00','09/11/20 22:01:00','09/12/20 00:01:00','09/12/20 02:01:00','09/12/20 04:01:00','09/12/20 06:01:00','09/12/20 08:01:00','09/12/20 10:02:00','09/12/20 12:02:00','09/12/20 14:02:00','09/12/20 16:02:00','09/12/20 18:02:00','09/12/20 20:02:00','09/12/20 22:02:00','09/13/20 00:03:00','09/13/20 02:03:00','09/13/20 04:03:00','09/13/20 06:03:00','09/13/20 08:04:00','09/13/20 10:04:00','09/13/20 12:04:00','09/13/20 14:05:00','09/13/20 16:05:00','09/13/20 18:05:00','09/13/20 20:05:00','09/13/20 22:05:00','09/14/20 00:06:00','09/14/20 02:06:00','09/14/20 04:06:00','09/14/20 06:06:00','09/14/20 08:06:00','09/14/20 10:06:00','09/14/20 12:06:00','09/14/20 14:07:00','09/14/20 16:07:00','09/14/20 18:07:00','09/14/20 20:07:00','09/14/20 22:07:00','09/15/20 00:07:00','09/15/20 02:07:00','09/15/20 04:07:00','09/15/20 06:07:00','09/15/20 08:08:00','09/15/20 10:08:00','09/15/20 12:08:00','09/15/20 14:08:00','09/15/20 16:08:00','09/15/20 18:09:00','09/15/20 20:09:00','09/15/20 22:09:00','09/16/20 00:09:00','09/16/20 02:09:00','09/16/20 04:09:00','09/16/20 06:09:00','09/16/20 08:10:00','09/16/20 10:10:00','09/16/20 12:10:00','09/16/20 14:10:00','09/16/20 16:10:00','09/16/20 18:11:00','09/16/20 20:11:00','09/16/20 22:11:00','09/17/20 00:11:00','09/17/20 02:11:00','09/17/20 04:12:00','09/17/20 06:12:00','09/17/20 08:12:00']
date_and_time2 = ['2020-09-01T00:00:00','2020-09-11T01:59:00','2020-09-11T03:59:00','2020-09-11T05:59:00','2020-09-11T07:59:00','2020-09-11T10:00:00','2020-09-11T12:00:00','2020-09-11T14:00:00','2020-09-11T16:00:00','2020-09-11T18:00:00','2020-09-11T20:01:00','2020-09-11T22:01:00','2020-09-12T00:01:00','2020-09-12T02:01:00','2020-09-12T04:01:00','2020-09-12T06:01:00','2020-09-12T08:01:00','2020-09-12T10:02:00','2020-09-12T12:02:00','2020-09-12T14:02:00','2020-09-12T16:02:00','2020-09-12T18:02:00','2020-09-12T20:02:00','2020-09-12T22:02:00','2020-09-13T00:03:00','2020-09-13T02:03:00','2020-09-13T04:03:00','2020-09-13T06:03:00','2020-09-13T08:04:00','2020-09-13T10:04:00','2020-09-13T12:04:00','2020-09-13T14:05:00','2020-09-13T16:05:00','2020-09-13T18:05:00','2020-09-13T20:05:00','2020-09-13T22:05:00','2020-09-14T00:06:00','2020-09-14T02:06:00','2020-09-14T04:06:00','2020-09-14T06:06:00','2020-09-14T08:06:00','2020-09-14T10:06:00','2020-09-14T12:06:00','2020-09-14T14:07:00','2020-09-14T16:07:00','2020-09-14T18:07:00','2020-09-14T20:07:00','2020-09-14T22:07:00','2020-09-15T00:07:00','2020-09-15T02:07:00','2020-09-15T04:07:00','2020-09-15T06:07:00','2020-09-15T08:08:00','2020-09-15T10:08:00','2020-09-15T12:08:00','2020-09-15T14:08:00','2020-09-15T16:08:00','2020-09-15T18:09:00','2020-09-15T20:09:00','2020-09-15T22:09:00','2020-09-16T00:09:00','2020-09-16T02:09:00','2020-09-16T04:09:00','2020-09-16T06:09:00','2020-09-16T08:10:00','2020-09-16T10:10:00','2020-09-16T12:10:00','2020-09-16T14:10:00','2020-09-16T16:10:00','2020-09-16T18:11:00','2020-09-16T20:11:00','2020-09-16T22:11:00','2020-09-17T00:11:00','2020-09-17T02:11:00','2020-09-17T04:12:00','2020-09-17T06:12:00','2020-09-17T08:12:00']
date_and_time3 = ['2020-09-01 00:00:00','2020-09-11 01:59:00','2020-09-11 03:59:00','2020-09-11 05:59:00','2020-09-11 07:59:00','2020-09-11 10:00:00','2020-09-11 12:00:00','2020-09-11 14:00:00','2020-09-11 16:00:00','2020-09-11 18:00:00','2020-09-11 20:01:00','2020-09-11 22:01:00','2020-09-12 00:01:00','2020-09-12 02:01:00','2020-09-12 04:01:00','2020-09-12 06:01:00','2020-09-12 08:01:00','2020-09-12 10:02:00','2020-09-12 12:02:00','2020-09-12 14:02:00','2020-09-12 16:02:00','2020-09-12 18:02:00','2020-09-12 20:02:00','2020-09-12 22:02:00','2020-09-13 00:03:00','2020-09-13 02:03:00','2020-09-13 04:03:00','2020-09-13 06:03:00','2020-09-13 08:04:00','2020-09-13 10:04:00','2020-09-13 12:04:00','2020-09-13 14:05:00','2020-09-13 16:05:00','2020-09-13 18:05:00','2020-09-13 20:05:00','2020-09-13 22:05:00','2020-09-14 00:06:00','2020-09-14 02:06:00','2020-09-14 04:06:00','2020-09-14 06:06:00','2020-09-14 08:06:00','2020-09-14 10:06:00','2020-09-14 12:06:00','2020-09-14 14:07:00','2020-09-14 16:07:00','2020-09-14 18:07:00','2020-09-14 20:07:00','2020-09-14 22:07:00','2020-09-15 00:07:00','2020-09-15 02:07:00','2020-09-15 04:07:00','2020-09-15 06:07:00','2020-09-15 08:08:00','2020-09-15 10:08:00','2020-09-15 12:08:00','2020-09-15 14:08:00','2020-09-15 16:08:00','2020-09-15 18:09:00','2020-09-15 20:09:00','2020-09-15 22:09:00','2020-09-16 00:09:00','2020-09-16 02:09:00','2020-09-16 04:09:00','2020-09-16 06:09:00','2020-09-16 08:10:00','2020-09-16 10:10:00','2020-09-16 12:10:00','2020-09-16 14:10:00','2020-09-16 16:10:00','2020-09-16 18:11:00','2020-09-16 20:11:00','2020-09-16 22:11:00','2020-09-17 00:11:00','2020-09-17 02:11:00','2020-09-17 04:12:00','2020-09-17 06:12:00','2020-09-17 08:12:00']

usage = [0,292,302,302,302,302,303,304,304,305,310,314,319,325,328,329,329,329,329,331,332,333,333,338,341,342,346,348,348,348,348,348,349,349,349,357,369,375,381,381,381,382,382,384,384,387,389,390,395,403,406,406,406,407,408,410,410,412,415,418,425,430,433,434,434,434,435,436,436,437,439,441,447,448,449,450,450]

alloted_usage = [0,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229,1229]

projected_usage = [0,868,891,883,876,869,865,861,854,851,858,862,869,879,881,877,870,864,858,857,853,850,844,850,852,848,852,852,846,840,834,829,826,820,815,828,851,859,867,862,856,853,848,847,842,844,843,840,846,858,859,854,849,846,843,843,838,837,838,840,849,854,856,853,848,844,841,838,834,831,831,830,837,835,832,830,826]

usage_100 = [0,413,416,419,423,426,430,433,436,440,443,447,450,454,457,460,464,467,471,474,478,481,484,488,491,495,498,501,505,508,512,515,519,522,525,529,532,536,539,542,546,549,553,556,560,563,566,570,573,577,580,584,587,590,594,597,601,604,607,611,614,618,621,625,628,631,635,638,642,645,648,652,655,659,662,666,669]

usage_90 = [0,371,374,377,380,383,387,389,392,396,398,402,405,408,411,414,417,420,423,426,430,432,435,439,441,445,448,450,454,457,460,463,467,469,472,476,478,482,485,487,491,494,497,500,504,506,509,513,515,519,522,525,528,531,534,537,540,543,546,549,552,556,558,562,565,567,571,574,577,580,583,586,589,593,595,599,602]

date_and_time4 = [datetime.fromisoformat(item) for item in date_and_time3]
print(date_and_time4[0:5])
days = mdates.DayLocator(interval=1)
day_fmt = mdates.DateFormatter('%D')

fig, ax1 = plt.subplots(figsize=(12, 8), tight_layout=True)
ax1.plot(date_and_time4, usage, '-b2', label='Actual Usage')
ax1.plot(date_and_time4, usage_100, '-', color='gray', linewidth=5, label='100% Allocation Line')
ax1.plot(date_and_time4, usage_90, ':', color='gray', linewidth=0.75, label='90% Allocation Line')
fig.autofmt_xdate()
ax1.set_title("Xfinity Usage for Current Month")
ax1.legend()
ax1.xaxis.set_major_locator(days)
ax1.xaxis.set_major_formatter(day_fmt)
ax1.xaxis.set_label_text('Time')
ax1.yaxis.set_label_text('Usage, GB')

current_percent_string = 'Currently running at: ' + '{:.1f}'.format(100 * usage[-1] / usage_100[-1]) + '%'
usage_string = 'Current Estimated Monthly Usage: ' + str(projected_usage[-1]) + ' GB of ' + str(alloted_usage[-1]) + ' GB allowed' 
if projected_usage[-1] >= alloted_usage[-1]:
    font_color = "red"
else:
    font_color = 'black'
t = plt.figtext(0.97,0.15, current_percent_string, horizontalalignment='right', fontweight='bold', color=font_color, fontsize='large')
t = plt.figtext(0.97,0.12, usage_string, horizontalalignment='right', fontweight='bold', color=font_color, fontsize='large')


plt.show()
# plt.savefig(DATA_PATH + 'curr_month_plot.png')

# sleep(30)